--- 
title: Customizing the SproutCore TreeController with a custom icon for leaf nodes
layout: post
---

In the SproutCore client I wanted to display a customized icon for the leaf nodes, depending on the type of node. Each node has a "nodeType" parameter that can either be "chart", "alert" og "groupedStatistic", and I wanted to display a custom icon for each of the different nodes like this:  

<img src="http://confluence.haagen.name/download/attachments/2457630/nodeicons.png?version=1&modificationDate=1296128780273"/>

As you can see from the image above, the chart nodes have a image of a chart, the alert node of a warning triangle while the Grouped Statistics node has an icon with a "G" in it. 

<h2>Calculated property on the model</h2>

The first thing I needed to do was to add a calculated property on the model object for the treenode, which I called "itemIcon". This property would return the correct image if the node has no children (is a leaf node), based on the model property "nodeType". If the node is either not a leaf node, or has the correct nodeType, the function return null, telling SproutCore that no icon will be necessary for this particular node. 

Following is the full data-model for the tree items:

{ % highlight javascript %}
EurekaJView.InstrumentationTreeModel = SC.Record.extend(
/** @scope EurekaJView.InstrumentationTreeModel.prototype */
{

    primaryKey: 'guiPath',
    guiPath: SC.Record.attr(String),

    name: SC.Record.attr(String),
    isSelected: SC.Record.attr(Boolean),
    parentPath: SC.Record.attr(String),
    hasChildren: SC.Record.attr(Boolean),
    treeItemIsExpanded: NO,
    childrenNodes: SC.Record.toMany('EurekaJView.InstrumentationTreeModel'),
	chartGrid: SC.Record.toMany('EurekaJView.ChartGridModel'),
    nodeType: SC.Record.attr(String),

    treeItemChildren: function() {
        if (this.get('childrenNodes').toArray().length === 0) {
            return null;
        } else {
            return this.get('childrenNodes');
        }
    }.property(),

    itemIcon: function() {
        if (!this.get('hasChildren') && SC.compare(this.get('nodeType'), "chart") == 0) {
            return static_url('images/ej_chart_16.png');
        } else if (!this.get('hasChildren') && SC.compare(this.get('nodeType'), "alert") == 0) {
            return static_url('images/ej_chart_alert_16.png');
        } else if (!this.get('hasChildren') && SC.compare(this.get('nodeType'), "groupedStatistics") == 0) {
            return static_url('images/ej_groupedstats_16.png');
        } else {
            return null;
        }
    }.property()


});
{ % endhighlight %}

The images, as the code suggest is placed inside /resources/images and named accordingly. 

<h2>Making the view show the icon</h2>

The view in question is a SC.ListView, an in order to customize the way each row is shown, it is necessary to define an exampleView for the list like so: 

{ % highlight javascript %}
instrumentationTreeScrollView: SC.ScrollView.extend({
            isVisible: NO,
            layout: {
                top: 101,
                bottom: 0,
                left: 2,
                width: 299
            },
            canScrollHorizontally: YES,
            hasHorizontalScroller: YES,

            contentView: SC.ListView.extend({
                backgroundColor: '#F0F8FF',
                contentValueKey: "name",
                rowHeight: 18,
                borderStyle: SC.BORDER_NONE,

                contentBinding: 'EurekaJView.InstrumentationTreeController.arrangedObjects',

                selectionBinding: 'EurekaJView.InstrumentationTreeController.selection',
                selectionDelegate: EurekaJView.treeMenuSelectionDelegate,

                exampleView: EurekaJView.InstrumentationTreeListItem,
                recordType: EurekaJView.InstrumentationTreeModel
            }),

            borderStyle: SC.BORDER_NONE
        })
{ % endhighlight %}

The last missing piece is the implementation of EurekaJView.InstrumentationTreeListItem. As this class extends the SC.ListItemView the implementation is rather simple with only a single binding to the "itemIcon" calculated property from above:

{ % highlight javascript %}
EurekaJView.InstrumentationTreeListItem = SC.ListItemView.extend(
    /** @scope EurekaJView.InstrumentationTreeListItem.prototype */ {

    iconBinding: '.content.itemIcon'

});
{ % endhighlight %}

This is the start of a new weekly column that going to recap some of the action that's been happening on GitHub during the past week. My goals with this column include:

# Prove that Git is a great choice for version control!
# See how active the community at GitHub really is and what they're working on.
# Show how Open Source development is truly open.
Using the magic of feed-normalizer, hpricot, and gchartrb, I've created a little Rails app (dubbed <a href="http://github.com/qrush/rebase/tree/master">Rebase</a>, of course) that I can use to rip all of the events that are going on at GitHub. I'm going to try to keep the format of the column consistent, but I definitely need your feedback to make it better.

<h2>Stats Breakdown</h2>
<p style="text-align: center;"><img class="aligncenter" src="http://chart.apis.google.com/chart?chbh=22,2&amp;chf=bg,s,f0f0f0&amp;chxt=y,x&amp;chxl=0:|guide+(4)|commitcomment+(190)|member+(288)|wiki+(548)|delete+(729)|fork+(864)|gist+(1110)|follow+(1236)|create+(1274)|watch+(4299)|commit+(15131)&amp;cht=bhg&amp;chs=530x375&amp;chd=s:9RFEEDCCBAA&amp;chxr=1,0,15000&amp;chco=336699&amp;chtt=GitHub+Rebase+%E2%80%94+Total+Events+%E2%80%94+10/18/2008+to+10/25/2008&amp;chxs=0,4183c4,10,1|1,000000,10,0" alt="" width="530" height="375" /></p>
<p style="text-align: center;"><img class="aligncenter" src="http://chart.apis.google.com/chart?chf=bg,s,f0f0f0&amp;chm=B,bbccd9,0,0,0&amp;chxt=x,y&amp;chxl=0:|Saturday+10/18|Sunday+10/19|Monday+10/20|Tuesday+10/21|Wednesday+10/22|Thursday+10/23|Friday+10/24&amp;cht=lc&amp;chs=530x375&amp;chd=s:llw5934&amp;chxr=1,0,4500&amp;chco=336699&amp;chtt=GitHub+Rebase+%E2%80%94+Daily+Events+%E2%80%94+10/18/2008+to+10/25/2008&amp;chxs=0,4183c4,9,1|1,000000,10,1" alt="" width="530" height="375" /></p>

And, just for fun:
<p style="text-align: center;"><img class="aligncenter" src="http://chart.apis.google.com/chart?chl=2.55+events/min&cht=gom&chs=400x175&chd=t:25.469246031746" alt="" width="400" height="175" /></p>

<h2>Notably New Projects</h2>

Each week I'm going to look over some interesting new projects that have just showed up on GitHub and explain what they're about. If you have a project you think I should showcase, let me know and I'll see about featuring it!

<a href="https://github.com/josh/wysihat/tree">Wysihat</a>: A minimalist's approach to WYSIWYG/Rich Text Editor. Right now it's very, very beta, but it has the support of 37Signals so I definitely hope it's destined for greatness. Once some decent themes are created for it, I'd definitely consider integrating it in some of my sites. This project definitely is growing and needs help, so fork away.

<a href="http://github.com/android">Android</a>: Google announced that their Android framework was going open source and was hosted on Git, so it was clearly only a matter of time before their code landed on GitHub too. They have a ton of projects in their codebase, but it doesn't seem like all of them have pushed yet. Definitely looks promising though, and I really would like to see how their system works.

<a href="http://github.com/webco/acts_as_passive_aggressive/tree/master">acts_as_passive_aggressive</a>: Just in case you ever needed a way to vent on your users, this plugin provides the perfect opportunity. I love the project's readme.

<a href="http://github.com/davetroy/votereport/tree/master">VoteReport</a>: This is a new Rails site to track the election next week through Twitter. They've got quite a lot of documentation on their <a href="http://votereport.pbwiki.com/FrontPage">PBWiki</a>, and I really hope that this site turns out to be a little more useful and fun than watching tweets fly by on Twitter's election page. If you want to help them get the project up and running before the 4th, go for it!

<a href="http://github.com/biilmann/javascript-xhtml-purifier/tree">javascript-xhtml-purifier</a>: A new, robust JS script to sanitize HTML. I can guarantee that at some point most web developers will need to do this, so bookmark or clone away. 
Next week I'd love to break down the stats a little more and figure out what commits were the most commented on, and maybe which projects had the most activity. Let me know what you'd like to see in the future!